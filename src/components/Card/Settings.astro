---
import { Toggle, InvisibleButton } from "paully";
import { Check } from "paully/svgs";

let { settings } = Astro.props;

let groups = [[]];
let group = 0;
let current = 0;
let max = 2;

settings.forEach(function (setting, index) {
  groups[group].push(setting);
  current++;

  let full_group = current % max == 0;
  let more_settings = settings.length > index + 1;

  if (full_group && more_settings) {
    groups.push([]);
    current = 0;
    group++;
  }
});
---

<script src="~scripts/components/card/settings.js"></script>

{
  groups.map(function (group, index) {
    let display = index > 0 ? "none" : "block";
    let count = 0;

    return (
      <ul class="settings" style={{ display }}>
        {group.map(function (settings) {
          return (
            <div class:list={[`setting-group`]}>
              {settings.map(function (setting, index) {
                count++;
                return (
                  <li
                    class:list={[
                      "setting",
                      count % 2 ? "even" : "odd",
                      setting.editable && "editable",
                    ]}
                  >
                    <span>{setting.title}</span>
                    {!setting.editable && <Check className="check" />}
                    {setting.editable && (
                      <Toggle checked={setting.value} className="toggle" />
                    )}
                  </li>
                );
              })}
            </div>
          );
        })}
      </ul>
    );
  })
}

{
  groups.length > 1 && (
    <div class="wrap-pagination">
      {groups.map(function (_, index) {
        return (
          <InvisibleButton
            data={index == 0 ? "active" : null}
            className="dot-button"
          />
        );
      })}
    </div>
  )
}

<style lang="scss">
  @use "~mixins" as *;

  .settings {
    max-width: $max-width-card-copy--config;
    border-radius: $border-radius-card;
    background-color: white;
    min-height: toRem(84);
    min-width: toRem(206);
    font-size: 1.125rem;
    border: 1px solid;
    overflow: hidden;
    padding-left: 0;
    color: black;
    margin: 0;
  }

  .wrap-pagination {
    margin-top: $margin-bottom-card-header;
    justify-content: center;
    display: flex;
    gap: toRem(8);
  }

  .dot-button {
    @include size(1rem);
    border-radius: 50%;
    border: 2px solid;
  }

  .dot-button[data="active"] {
    background-color: black;
    pointer-events: none;
  }

  .dot-button[data="active"].selected-state {
    background-color: white;
  }

  .setting {
    justify-content: space-between;
    padding: $padding-card-setting;
    grid-auto-flow: column;
    align-items: center;
    font-weight: normal;
    gap: $margin-card;
    list-style: none;
    text-align: left;
    display: grid;
  }

  .setting.even {
    background-color: aliceblue;
  }

  .setting-group + .setting-group {
    border-top: 2px dashed;
    margin-top: 0;
  }

  .setting + .setting {
    border-top: 2px dashed;
    margin-top: 0;
  }

  .check.selected-state {
    fill: black;
  }
</style>
